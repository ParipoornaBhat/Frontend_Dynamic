 {
  BOPP.printing.jobInfo.checked && ( 
  <>
  {/*   printing: { jobInfo: { 
                        position:1,
                        checked: false ,
                        remarksChecked:false,
                        Remarks:"",
                    },
                    sizeMic:"",
                    materialType:"",
                    cylinder:"",
                    numberOfColours:0,
                    colourNames:[],
                    cylinderDirection:"", */}

        
        
        <h2>Printing</h2><br/>
        <div className='ItemForm-Job'>
        <>
        <div className='ItemForm-Job-input'>
    <label className="ItemForm-form-label">Size x Mic : </label>
              <input
                type="text"
                name="sizeMic"
                value={BOPP.printing.sizeMic}
                onChange={(e) => handleInputChange('printing', 'sizeMic', e.target.value )}
                className="ItemForm-form-input"
              />
    </div>
    <div className='ItemForm-Job-input'>
    <label className="ItemForm-form-label">Material Type : </label>
              
              <select
                
                onChange={(e) => handleInputChange('printing', 'materialType', e.target.value )}
                className="ItemForm-form-select"
              >
                {BOPPoptions && BOPPoptions.find(option => option.name === "Printing Material Type") && 
    BOPPoptions.find(option => option.name === "Printing Material Type").options.map((option, index) => (
      <option key={index} value={option}>
        {option}
      </option>))}
              </select>
    </div>
    <div className='ItemForm-Job-select'>
    <label className="ItemForm-form-label">Cylinder : </label>
            <select
                
                onChange={(e) => handleInputChange('printing', 'cylinder', e.target.value )}
                className="ItemForm-form-select"
              >
                <option value="Old">Old</option>
                <option value="New">New</option>
              </select>
    </div>
    <div className='ItemForm-Job-select'>
    <label className="ItemForm-form-label">Cylinder Direction</label>
              
               <select
                
                onChange={(e) => handleInputChange('printing', 'cylinderDirection', e.target.value )}
                className="ItemForm-form-select"
              >
                <option value="Reverse" >Reverse</option>
                <option value="Straigth">Straigth</option>
              </select>
    </div>

    <div className='ItemForm-Job-select'>
    <label className="ItemForm-form-label">Number of Colours : </label>
    <select
        name="numberOfColours"
        value={BOPP.printing.numberOfColours || 0}
        onChange={(e) => handleInputChange('printing', 'numberOfColours', e.target.value )}
        className="ItemForm-form-input"
    >
        {Array.from({ length: 10 }, (_, i) => (
            <option key={`A-${i}`} value={i}>{i}</option>
        ))}
    </select>
    </div>
    
    <div className='ItemForm-Job-input'>
    <label className="ItemForm-form-label">Colour Names (comma separated) : </label>
              <input
                type="text"
                name="colourNames"
                value={BOPP.printing.colourNames.join(',')}
                onChange={(e) => handleInputChange('printing', 'colourNames', e.target.value.split(',')) }
                className="ItemForm-form-input"
              />
    </div>
    
            </>
    <br/>
    <div className='ItemForm-Job-remarkcheck'>
        <input 
            className="ItemForm-Job-remark-inputcheck" 
            type="checkbox" 
            name="printingremarkcheck" 
            checked={BOPP.printing.jobInfo.remarksChecked}
            onChange={(e) => handleInputChange('printing', 'jobInfo', e.target.checked, 'remarksChecked')} 
        />
        <label className="ItemForm-Job-remark-label">Printing Remark</label>
        {
  BOPP.printing.jobInfo.remarksChecked && (
    <div className='ItemForm-Job-textbox'>
        <textarea
            name="printingRemarks"
            value={BOPP.printing.jobInfo.Remarks}
            onChange={(e) => handleInputChange('printing', 'jobInfo', e.target.checked, 'Remarks')} 
            className="ItemForm-Job-remark-textarea"
        />
</div>
  )
}
     </div>

    </div>
    <hr/></>)
}

{
  BOPP.inspection1.jobInfo.checked && (<>
    {/*    inspection1: { jobInfo: { 
                        position:2,
                        checked: false ,
                        remarksChecked:false,
                        Remarks:"",
                    },  */}
            <h2>inspection1</h2>

      <div className='ItemForm-Job'>
      <br/>
      <div className='ItemForm-Job-remarkcheck'>
          <input 
              className="ItemForm-Job-remark-inputcheck" 
              type="checkbox" 
              name="inspection1remarkcheck" 
              checked={BOPP.inspection1.jobInfo.remarksChecked}
              onChange={(e) => handleInputChange('inspection1', 'jobInfo', e.target.checked, 'remarksChecked')} 
          />
          <label className="ItemForm-Job-remark-label">inspection1 Remark</label>
          {
    BOPP.inspection1.jobInfo.remarksChecked && (
      <div className='ItemForm-Job-textbox'>
          <textarea
              name="inspection1Remarks"
              value={BOPP.inspection1.jobInfo.Remarks}
              onChange={(e) => handleInputChange('inspection1', 'jobInfo', e.target.checked, 'Remarks')} 
              className="ItemForm-Job-remark-textarea"
          />
  </div>
    )
  }
       </div>
  
      </div>
      <hr/></>)
}

{
  BOPP.lamination.jobInfo.checked && (<>
    {/*   lamination: {   jobInfo: { 
                            position:3,
                            checked: false ,
                            remarksChecked:false,
                            Remarks:"",
                        },
                        sizeMic:"",
                        type:"",
                         */
                         }
  
   
          
          
          <h2>lamination</h2><br/>
          <div className='ItemForm-Job'>
          <>
          <div className='ItemForm-Job-input'>
      <label className="ItemForm-form-label">Size x Mic : </label>
                <input
                  type="text"
                  name="laminationsizeMic"
                  value={BOPP.lamination.sizeMic}
                  onChange={(e) => handleInputChange('lamination', 'sizeMic', e.target.value )}
                  className="ItemForm-form-input"
                />
      </div>
      
      <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">Type : </label>
              <select
                  onChange={(e) => handleInputChange('lamination', 'type', e.target.value )}
                  className="ItemForm-form-select"
                >
                  {BOPPoptions && BOPPoptions.find(option => option.name === "Lamination Type") && 
                  BOPPoptions.find(option => option.name === "Lamination Type").options.map((option, index) => (
                    <option key={index} value={option}>
                      {option}
                    </option>))}
                </select>
      </div>
      
              </>
      <br/>
      <div className='ItemForm-Job-remarkcheck'>
          <input 
              className="ItemForm-Job-remark-inputcheck" 
              type="checkbox" 
              name="laminationremarkcheck" 
              checked={BOPP.lamination.jobInfo.remarksChecked}
              onChange={(e) => handleInputChange('lamination', 'jobInfo', e.target.checked, 'remarksChecked')} 
          />
          <label className="ItemForm-Job-remark-label">lamination Remark</label>
          {
    BOPP.lamination.jobInfo.remarksChecked && (
      <div className='ItemForm-Job-textbox'>
          <textarea
              name="laminationRemarks"
              value={BOPP.lamination.jobInfo.Remarks}
              onChange={(e) => handleInputChange('lamination', 'jobInfo', e.target.checked, 'Remarks')} 
              className="ItemForm-Job-remark-textarea"
          />
  </div>
    )
  }
       </div>
  
      </div>
      <hr/></>)
}

{
  BOPP.inspection2.jobInfo.checked && (<>
    {/*   inspection2: { 
                    jobInfo: { 
                        position:4,
                        checked: false ,
                        remarksChecked:false,
                        Remarks:"",
                    }, 
                     */}
            <h2>inspection2</h2>

      <div className='ItemForm-Job'>
      <br/>
      <div className='ItemForm-Job-remarkcheck'>
          <input 
              className="ItemForm-Job-remark-inputcheck" 
              type="checkbox" 
              name="inspection2remarkcheck" 
              checked={BOPP.inspection2.jobInfo.remarksChecked}
              onChange={(e) => handleInputChange('inspection2', 'jobInfo', e.target.checked, 'remarksChecked')} 
          />
          <label className="ItemForm-Job-remark-label">inspection2 Remark</label>
          {
    BOPP.inspection2.jobInfo.remarksChecked && (
      <div className='ItemForm-Job-textbox'>
          <textarea
              name="inspection2Remarks"
              value={BOPP.inspection2.jobInfo.Remarks}
              onChange={(e) => handleInputChange('inspection2', 'jobInfo', e.target.checked, 'Remarks')} 
              className="ItemForm-Job-remark-textarea"
          />
  </div>
    )
  }
       </div>
  
      </div>
      <hr/></>)
}
{
  BOPP.slitting.jobInfo.checked && (<>
    {/*   slitting: { jobInfo: { 
                        position:5,
                        checked: false ,
                        remarksChecked:false,
                        Remarks:"",
                    }, 
    
        
        
                         */}
  
      
          
          
          <h2>slitting</h2><br/>
          <div className='ItemForm-Job'>
      <br/>
      <div className='ItemForm-Job-remarkcheck'>
          <input 
              className="ItemForm-Job-remark-inputcheck" 
              type="checkbox" 
              name="slittingremarkcheck" 
              checked={BOPP.slitting.jobInfo.remarksChecked}
              onChange={(e) => handleInputChange('slitting', 'jobInfo', e.target.checked, 'remarksChecked')} 
          />
          <label className="ItemForm-Job-remark-label">slitting Remark</label>
          {
    BOPP.slitting.jobInfo.remarksChecked && (
      <div className='ItemForm-Job-textbox'>
          <textarea
              name="slittingRemarks"
              value={BOPP.slitting.jobInfo.Remarks}
              onChange={(e) => handleInputChange('slitting', 'jobInfo', e.target.checked, 'Remarks')} 
              className="ItemForm-Job-remark-textarea"
          />
  </div>
    )
  }
       </div>
  
      </div>
      <hr/></>)
}


{
  BOPP.fabricLamination.jobInfo.checked && (<>
    {/*   fabricLamination: { jobInfo: { 
                                position:6,
                                checked: false ,
                                remarksChecked:false,
                                Remarks:"",
                            }, 
                            size:"",
                            materialType:"",
                            sides:"",
                            Trimming:false,
                        },
     */}
  
      
          <h2>fabricLamination</h2><br/>
          <div className='ItemForm-Job'>
          <>
          <div className='ItemForm-Job-input'>
      <label className="ItemForm-form-label">Size : </label>
                <input
                  type="text"
                  name="fabricLaminationsize"
                  value={BOPP.fabricLamination.size}
                  onChange={(e) => handleInputChange('fabricLamination', 'size', e.target.value )}
                  className="ItemForm-form-input"
                />
      </div>
     
      <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">materialType : </label>
              <select
                  value={BOPP.fabricLamination.materialType}
                  onChange={(e) => handleInputChange('fabricLamination', 'materialType', e.target.value )}
                  className="ItemForm-form-select"
                >
                  {BOPPoptions && BOPPoptions.find(option => option.name === "Fabric Lamination Material Types") && 
                  BOPPoptions.find(option => option.name === "Fabric Lamination Material Types").options.map((option, index) => (
                    <option key={index} value={option}>
                      {option}
                    </option>))}
                </select>
      </div>
      <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">sides : </label>
              <select
                  value={BOPP.fabricLamination.sides}
                  onChange={(e) => handleInputChange('fabricLamination', 'sides', e.target.value )}
                  className="ItemForm-form-select"
                >
                  {BOPPoptions && BOPPoptions.find(option => option.name === "Fabric Lamination Sides") && 
                  BOPPoptions.find(option => option.name === "Fabric Lamination Sides").options.map((option, index) => (
                    <option key={index} value={option}>
                      {option}
                    </option>))}
                </select>
      </div>
      <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">Trimming : </label>
              <select
                  value={BOPP.fabricLamination.Trimming}
                  onChange={(e) => handleInputChange('fabricLamination', 'Trimming', e.target.value )}
                  className="ItemForm-form-select"
                >
                  <option value={false} >False</option>
                  <option value={true}>True</option>
                </select>
      </div>
      perforation??
      
      
              </>
      <br/>
      <div className='ItemForm-Job-remarkcheck'>
          <input 
              className="ItemForm-Job-remark-inputcheck" 
              type="checkbox" 
              name="fabricLaminationremarkcheck" 
              checked={BOPP.fabricLamination.jobInfo.remarksChecked}
              onChange={(e) => handleInputChange('fabricLamination', 'jobInfo', e.target.checked, 'remarksChecked')} 
          />
          <label className="ItemForm-Job-remark-label">fabricLamination Remark</label>
          {
    BOPP.fabricLamination.jobInfo.remarksChecked && (
      <div className='ItemForm-Job-textbox'>
          <textarea
              name="fabricLaminationRemarks"
              value={BOPP.fabricLamination.jobInfo.Remarks}
              onChange={(e) => handleInputChange('fabricLamination', 'jobInfo', e.target.checked, 'Remarks')} 
              className="ItemForm-Job-remark-textarea"
          />
  </div>
    )
  }
       </div>
  
      </div>
      <hr/></>)
}

{
  BOPP.cuttingAndSlitting.jobInfo.checked && (<>
    {/*   cuttingAndSlitting: {   jobInfo: { 
                                    position:7,
                                    checked: false ,
                                    remarksChecked:false,
                                    Remarks:"",
                                },
                                stiching:false,
                                perforation:false,
                                treadColour:"",
                                handleType:"",
                                handleColour:"",
                                packing:false,
     },
     */}
  
      
          
          
          <h2>cuttingAndSlitting</h2><br/>
          <div className='ItemForm-Job'>
          <>

          <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">stiching : </label>
              <select
                  value={BOPP.cuttingAndSlitting.stiching}
                  onChange={(e) => handleInputChange('cuttingAndSlitting', 'stiching', e.target.value )}
                  className="ItemForm-form-select"
                >
                  <option value={false} >No</option>
                  <option value={true}>Yes</option>
                </select>
      </div>
      <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">perforation : </label>
              <select
                  value={BOPP.cuttingAndSlitting.perforation}
                  onChange={(e) => handleInputChange('cuttingAndSlitting', 'perforation', e.target.value )}
                  className="ItemForm-form-select"
                >
                  <option value={false} >No</option>
                  <option value={true}>Yes</option>
                </select>
      </div>
      

          <div className='ItemForm-Job-input'>
      <label className="ItemForm-form-label">treadColour : </label>
                <input
                  type="text"
                  name="cuttingAndSlittingtreadColour"
                  value={BOPP.cuttingAndSlitting.treadColour}
                  onChange={(e) => handleInputChange('cuttingAndSlitting', 'treadColour', e.target.value )}
                  className="ItemForm-form-input"
                />
      </div>
      
     
      <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">handleType : </label>
              <select
                  value={BOPP.cuttingAndSlitting.handleType}
                  onChange={(e) => handleInputChange('cuttingAndSlitting', 'handleType', e.target.value )}
                  className="ItemForm-form-select"
                >
                  {BOPPoptions && BOPPoptions.find(option => option.name === "Cutting and Slitting Handle Types") && 
                  BOPPoptions.find(option => option.name === "Cutting and Slitting Handle Types").options.map((option, index) => (
                    <option key={index} value={option}>
                      {option}
                    </option>))}
                </select>
      </div>
      
      <div className='ItemForm-Job-input'>
      <label className="ItemForm-form-label">handleColour : </label>
                <input
                  type="text"
                  name="cuttingAndSlittinghandleColour"
                  value={BOPP.cuttingAndSlitting.handleColour}
                  onChange={(e) => handleInputChange('cuttingAndSlitting', 'handleColour', e.target.value )}
                  className="ItemForm-form-input"
                />
      </div>
      
      <div className='ItemForm-Job-select'>
      <label className="ItemForm-form-label">packing : </label>
              <select
                  value={BOPP.cuttingAndSlitting.packing}
                  onChange={(e) => handleInputChange('cuttingAndSlitting', 'packing', e.target.value )}
                  className="ItemForm-form-select"
                >
                  <option value={false} >No</option>
                  <option value={true}>Yes</option>
                </select>
      </div>
      
      
              </>
      <br/>
      <div className='ItemForm-Job-remarkcheck'>
          <input 
              className="ItemForm-Job-remark-inputcheck" 
              type="checkbox" 
              name="cuttingAndSlittingremarkcheck" 
              checked={BOPP.cuttingAndSlitting.jobInfo.remarksChecked}
              onChange={(e) => handleInputChange('cuttingAndSlitting', 'jobInfo', e.target.checked, 'remarksChecked')} 
          />
          <label className="ItemForm-Job-remark-label">cuttingAndSlitting Remark</label>
          {
    BOPP.cuttingAndSlitting.jobInfo.remarksChecked && (
      <div className='ItemForm-Job-textbox'>
          <textarea
              name="cuttingAndSlittingRemarks"
              value={BOPP.cuttingAndSlitting.jobInfo.Remarks}
              onChange={(e) => handleInputChange('cuttingAndSlitting', 'jobInfo', e.target.checked, 'Remarks')} 
              className="ItemForm-Job-remark-textarea"
          />
  </div>
    )
  }
       </div>
  
      </div>
      <hr/></>)
}
